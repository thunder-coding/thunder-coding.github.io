[{"content":" ℹ️ Note If you would like to see my final submitted code, you can find it on thunder-coding/Hackslash-SigSTP2025-Solutions\nBackground One of the coding clubs at NIT Patna, HackSlash recently conducted a induction where problems were given for joining the club. I guess the idea is that people who solved the most of the problems with the best approach would be selected in the club. There were different tasks for different team. Since I wanted to join the DSA Team (also called SigSTP team), I did these problems.\nProblems For people outside of NITP reading this blog, if you want to see the problems you can view a copy of the problem statements on the GitHub repository linked above:\nTask 1: ATM Machine Problem Statement Task 2: Task Manager Problem Statement Task 3: Trial of the Cheater\u0026rsquo;s Path Problem Statement In this blog, I\u0026rsquo;ll only be discussing about Task 3 as Task 1 and Task 2 are quite easy and standard problems.\nTask 1 Task 1 was a classical ATM vending machine problem or a coin change problem. It was just a matter of modulo and repeat, and check if we were able to dispense the money or not.\nYou can find my solution for the Task 1 here\nTask 2 Task 2 was a task manager implementation which was just a matter of using priority_queue. Since I choose to do the problems with C++, I could simply make use of std::priority_queue, but I decided not to as the problem also required me to print the queue when requested. It is not possible to get the internal queue in std::priority_queue, other implementations like that of the Boost library do allow this, but what\u0026rsquo;s the point of using a library when you can do it yourself and learn along.\nI ended up using std::vector to store the tasks which were sorted using std::less\u0026lt;\u0026gt;. This way I could insert tasks into the data structure with O(log n) time complexity and retrieve the top task with O(1) time complexity. And for getting the queue, I simply returned the internal std::vector which was already sorted.\nYou can find my solution for the Task 2 here\nTask-2/TaskManager.cc and Task-2/TaskManager.h contains the implementation for the queue/actual task manager.\nTask 3 Task 3 was a medium difficulty task, and the only one I found interesting enough. The puzzle wanted us to solve a maze such that each point had two options to navigate to, left (L) and right (R). The puzzle contained two pieces of information in the form of text files:\nInstructions: The directions to take each time. These directions are supposed to be repeated LLLRRRLRRLL.....\nThese instructions could simply be parsed with a switch statement and going over the file character by character.\nTask-3/parser.cc:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 auto parseInstruction(std::istream \u0026amp;inp) -\u0026gt; Instructions { Instructions directions = {}; for (char ch = inp.get(); !inp.eof(); ch = inp.get()) { switch (ch) { case \u0026#39;L\u0026#39;: directions.emplace_back(Instruction::Left); break; case \u0026#39;R\u0026#39;: directions.emplace_back(Instruction::Right); break; default: throw std::runtime_error(\u0026#34;Invalid character encountered in instruction file\u0026#34;); } } return directions; } Here Instruction is simply an enum class with two members Instruction::Left and Instruction::Right which are the two directions which can be specified in the instrutions.\nThe map: The other part was information about where the left and right directions take you from a particular position:\n1 2 3 4 PGQ = (QRB, MJB) JQC = (MNM, TLQ) HNP = (NKD, PJT) ... Noticing the pattern, we can store this as a std::map from std::string to struct { std::string Left, Right; }. Further to speed comparisions in future, we can convert 3-character strings to a number. Since 3-character strings containing letters A-Z have around 26*26*26 possibilities, which can fit into an int16_t.\n1 2 3 4 5 6 7 8 auto parseNode(std::string str) -\u0026gt; Node { Node node = 0; for (int i = 0; i \u0026lt; 3; i++) { node *= 26; node += (str[i] - \u0026#39;A\u0026#39;); } return node; } Similarly parseNode() can also be declared for a std::ifstream\nNow that we can parse nodes, we need to make sure that the file is parsing things correctly and holding proper syntax:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 auto parsePuzzle(std::istream \u0026amp;inp) -\u0026gt; Puzzle { Puzzle nodes; // This is intentionally an int instead of a char, as inp.get() will return an EOF which is supposed to be greater // than 255. int chr; while (true) { Node const node = parseNode(inp); Node left; Node right; chr = inp.get(); MAKESURE_ELSE_ERROR_PARSING(chr == \u0026#39; \u0026#39;); chr = inp.get(); MAKESURE_ELSE_ERROR_PARSING(chr == \u0026#39;=\u0026#39;); ... chr = inp.get(); NodeData const nodeData = { .left = left, .right = right, }; nodes.emplace(node, nodeData); if (inp.eof()) { break; } MAKESURE_ELSE_ERROR_PARSING(chr == \u0026#39;\\n\u0026#39;); } return nodes; } Here, MAKESURE_ELSE_ERROR_PARSING is just a helper macro that throws an exception if the file doesn\u0026rsquo;t match the expected format. Also Puzzle is just a typedef to std::unordered_map\u0026lt;Node, NodeData\u0026gt;. I used std::unordered_map instead of std::map as in unordered map, lookups have a time complexity of O(n)\nPart 1 We have to reach ZZZ starting from AAA. We can do this by simply following the instructions and counting the number of steps taken. steps % instructions.size() will give the number of instruction which we have to follow for that step. Then we can simply update the current node to the left or right node and repeat the process.\nFrom Task-3/partOne.cc\n1 2 3 4 5 6 7 8 9 10 11 uint64_t steps = 0; for (Node currentNode = parseNode(\u0026#34;AAA\u0026#34;); currentNode != parseNode(\u0026#34;ZZZ\u0026#34;); steps++) { switch (instructions[steps % instructions.size()]) { case Instruction::Left: currentNode = puzzle.at(currentNode).left; break; case Instruction::Right: currentNode = puzzle.at(currentNode).right; break; } } Part 2 We have to start from every node starting with the letter A and reach node starting with letter Z at the same time from all starting position. This is a simple LCM problem, we simply find the minimum steps from each such node and then find the LCM of all these steps.\nFrom Task-3/partTwo.cc\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 // First find all the currentNodes that start with the letter \u0026#39;A\u0026#39; for (size_t i = 0; i != currentNodes.size(); i++) { auto node = currentNodes[i]; // This is similar to partOne(), we are just finding the step where the node ends with a \u0026#34;Z\u0026#34; for (; node % 26 != 25; steps[i]++) { switch (instructions[steps[i] % instructions.size()]) { case Instruction::Left: node = puzzle.at(node).left; break; case Instruction::Right: node = puzzle.at(node).right; break; } } ... // Return lcm of steps Building my solutions from source I have provided a CMakeLists.txt file in the root of the git repository. There are instructions on how to build from source in the README.md of the GitHub repository. Follow them to build from source after obtain the source using git:\n1 git clone https://github.com/thunder-coding/Hackslash-SigSTP2025-Solutions.git ","permalink":"https://cd.is-a.dev/posts/hackslash-sigstp-solution-to-the-trial-of-cheaters-path/","summary":"\u003cblockquote class=\"alert alert-note\"\u003e\n    \u003cp class=\"alert-heading\"\u003e\n      ℹ️\n      \n        Note\n      \n    \u003c/p\u003e\n    \u003cp\u003eIf you would like to see my final submitted code, you can find it on \u003ca href=\"https://github.com/thunder-coding/Hackslash-SigSTP2025-Solutions\"\u003ethunder-coding/Hackslash-SigSTP2025-Solutions\u003c/a\u003e\u003c/p\u003e\n  \u003c/blockquote\u003e\n\n\u003ch1 id=\"background\"\u003eBackground\u003c/h1\u003e\n\u003cp\u003eOne of the coding clubs at NIT Patna, HackSlash recently conducted a induction where problems were given for joining the club. I guess the idea is that people who solved the most of the problems with the best approach would be selected in the club. There were different tasks for different team. Since I wanted to join the DSA Team (also called SigSTP team), I did these problems.\u003c/p\u003e","title":"Solution to HackSlash SigSTP: Trial of Cheaters Path problem"},{"content":"Overview I often read a lot of the articles from sites like Hacker News, Lobste.rs, dev.to, some tech-related subreddits and a few others which I come across as a part of browsing the web. I love reading about what amazing things other people are doing, about how they are pushing the limits of what is possible, and how they solve their problems. As an aspiring engineer, I feel fascinated by technical writeups. Whenever I come across new blogs which I find interesting they often end up in my bookmarks. I have a few criteria which I use to decide if your site is worth bookmarking and revisiting.\nThe Criteria 1. Content Write something interesting, could be anything but share the technical details and don\u0026rsquo;t just write a PR nonsense. If I find too much PR nonsense on the site, it is very likely to be thrown away no matter how good the rest of the content is!\nAlso I like reading about emerging technologies, but if you are riding the hype train, I am not interested. I want to read about the real problems you faced and how you solved them, not about how you are using the latest and greatest tech which nobody else is. Show me how you built it, not how you\u0026rsquo;re using it.\n2. RSS Feed If you want me to come back to your site, have an RSS feed. I am not going to open up your site to find if there is something you. I let my RSS client take care of stuff I have read and left unread. If you don\u0026rsquo;t have an RSS feed, I am very likely not coming to your site unless it makes it to the top of Hacker News or any of the subreddits I follow (again using RSS). Also RSS feeds in my experience has also helped me filter out SEO crap, most sites that do have RSS feeds are either having it since a long time and are not just trying to game the SEO, or from hackers who love the simplicity of RSS. Your RSS doesn\u0026rsquo;t need to be complete, just the title and description is enough and I will open your blogs/writeups if I find them interesting enough.\n3. JavaScript, no thanks! I use NoScript Your site should be completely usable without JavaScript. No site content should be unavailable without JavaScript. I use NoScript and I am not going to enable JavaScript just to read your blog. If your site is not usable without JavaScript, I am not coming back in any way. I use NoScript as a security measure, and I am no way going to disable it anyway. If you are using third-party analytics service like Google Analytics or any other, your site is definitely going to be ranked down by me, but I may still visit it if the content is good enough.\n4. No Twitter/any other walled garden links I don\u0026rsquo;t want to visit sites like Twitter which are basically a walled garden now. If you discuss a lot about sites which don\u0026rsquo;t allow me to view content without me providing my personal details like email and phone number, then I will not be coming back to your site. I absolutely hate sites which don\u0026rsquo;t allow viewing their content anonymously and without loading a ton of JavaScript. If you are discussing about a tweet, please add a screenshot of it in your writeup as Nitter is dead now. (RIP Nitter)\n5. No Captcha just to read your mostly static site Your site should be completely usable without any captchas. I am totally find to use them to limit spam for comments, but having to solve a captcha just to read your site is a big no for me. Captchas are really inaccessible and a lot of people with special needs can\u0026rsquo;t solve them. This is the exact reason why I stopped reading phoronix.com, it requires me to solve a captcha. Although the site then loads without JavaScript, it sets a cookie in my browser which I am not comfortable with.\nThanks for reading my blog. By the way, my site supports RSS and should work perfectly fine without JavaScript (it is only needed for syntax highlighting in codeblocks), has no analytics (I have no idea how many visitors are there), and has no captchas.\n","permalink":"https://cd.is-a.dev/posts/how-i-decide-if-your-website-is-worth-a-revisit/","summary":"\u003ch1 id=\"overview\"\u003eOverview\u003c/h1\u003e\n\u003cp\u003eI often read a lot of the articles from sites like Hacker News, Lobste.rs, dev.to, some tech-related subreddits and a few others which I come across as a part of browsing the web. I love reading about what amazing things other people are doing, about how they are pushing the limits of what is possible, and how they solve their problems. As an aspiring engineer, I feel fascinated by technical writeups. Whenever I come across new blogs which I find interesting they often end up in my bookmarks. I have a few criteria which I use to decide if your site is worth bookmarking and revisiting.\u003c/p\u003e","title":"How I decide if your website is worth a revisit"},{"content":"Motivation Who doesn\u0026rsquo;t like to be cool on the internet and amongst other developer friends? Anyone? Everyone like to flex their skills. Isn\u0026rsquo;t it? It\u0026rsquo;s much more cool to listen 24x7 to Lofi on the terminal, whereas your friends may be stuck on ads every now and then. Besides looking cool, having a browser open for streaming music isn\u0026rsquo;t a good deal. Browsers are way too bloates especially if you\u0026rsquo;re low on resources.\nHacking the stream URL Before actually streaming CodeRadio from the terminal you need to have the stream URLs, which can be easily fetched if you know the correct place to look for. I started by downloading the raw HTML for the website using curl:\n1 curl https://coderadio.freecodecamp.org/ -Lo coderadio.html Upon investigating the XML, I found out that the site was most probably a React application. I quickly got the link to the main JS file loaded in by the HTML.\n1 bash https://coderadio.freecodecamp.org/static/js/min.5eb7bc98.js -Lo coderadio.js The JavaScript was highly obfuscated and minified so I prettified it using clang-format.\n1 clang-format -i coderadio.js Besides formatting the code with clang-format a part of it was still obfuscated, which was strange. I didn\u0026rsquo;t use something like Prettier as it would most probably have got Out Of Memory Killed by the kernel, and also Node.js is too slow in comparision to native. Running clang-format worked magically somehow\nNow the JavaScript was atleast readible. I looked for all sorts of URLs encoded in the JS, and finally got the websocket which gave the URLs of the streams and also the relay streams along with the list of songs in playlist:\n1 2 3 }(t.PureComponent), Oa = new (St())( \u0026#34;wss://coderadio-admin.freecodecamp.org/api/live/nowplaying/coderadio\u0026#34;), Now I just had to somehow try to conmect to the websocket. Fortunately for me, I was able to fetch the API with just HTTP(S), probably because initially websockets are initialed with http requests only.\nHere\u0026rsquo;s the raw JSON (stripped version):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 { \u0026#34;cache\u0026#34; : \u0026#34;event\u0026#34;, \u0026#34;is_online\u0026#34; : true, \u0026#34;listeners\u0026#34; : { \u0026#34;current\u0026#34; : 45, \u0026#34;total\u0026#34; : 45, \u0026#34;unique\u0026#34; : 45 }, \u0026#34;live\u0026#34; : { \u0026#34;broadcast_start\u0026#34; : null, \u0026#34;is_live\u0026#34; : false, \u0026#34;streamer_name\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;now_playing\u0026#34; : { \u0026#34;duration\u0026#34; : 179, \u0026#34;elapsed\u0026#34; : 115, \u0026#34;is_request\u0026#34; : false, \u0026#34;played_at\u0026#34; : 1663564407, \u0026#34;playlist\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;remaining\u0026#34; : 64, \u0026#34;sh_id\u0026#34; : 584950, \u0026#34;song\u0026#34; : { \u0026#34;album\u0026#34; : \u0026#34;Night Light\u0026#34;, \u0026#34;art\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/api/station/2/art/7681f2a146fcf71bf36b23cd-1586028052.jpg\u0026#34;, \u0026#34;artist\u0026#34; : \u0026#34;The Cancel\u0026#34;, \u0026#34;custom_fields\u0026#34; : [], \u0026#34;genre\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;dad6680f4b224857d418c0812677c7b7\u0026#34;, \u0026#34;lyrics\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;text\u0026#34; : \u0026#34;The Cancel - O.N.E.\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;O.N.E.\u0026#34; }, \u0026#34;streamer\u0026#34; : \u0026#34;\u0026#34; }, \u0026#34;playing_next\u0026#34; : { \u0026#34;cued_at\u0026#34; : 1663564534, \u0026#34;duration\u0026#34; : 110, \u0026#34;is_request\u0026#34; : false, \u0026#34;playlist\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;song\u0026#34; : { \u0026#34;album\u0026#34; : \u0026#34;Alone Journey\u0026#34;, \u0026#34;art\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/api/station/2/art/478f49a995584b4125696edd-1586028052.jpg\u0026#34;, \u0026#34;artist\u0026#34; : \u0026#34;Blazo\u0026#34;, \u0026#34;custom_fields\u0026#34; : [], \u0026#34;genre\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;c828c83f107543f59abbfd76ac30ffa2\u0026#34;, \u0026#34;lyrics\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;text\u0026#34; : \u0026#34;Blazo - Little Piano\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;Little Piano\u0026#34; } }, \u0026#34;song_history\u0026#34; : [ { \u0026#34;duration\u0026#34; : 328, \u0026#34;is_request\u0026#34; : false, \u0026#34;played_at\u0026#34; : 1663564082, \u0026#34;playlist\u0026#34; : \u0026#34;default\u0026#34;, \u0026#34;sh_id\u0026#34; : 584949, \u0026#34;song\u0026#34; : { \u0026#34;album\u0026#34; : \u0026#34;Love Journey\u0026#34;, \u0026#34;art\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/api/station/2/art/a060ebcb06756d64b0544725-1586028052.jpg\u0026#34;, \u0026#34;artist\u0026#34; : \u0026#34;Aso\u0026#34;, \u0026#34;custom_fields\u0026#34; : [], \u0026#34;genre\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;id\u0026#34; : \u0026#34;f4ac57dcc1a126ce2fd55a12b90c482c\u0026#34;, \u0026#34;lyrics\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;text\u0026#34; : \u0026#34;Aso - Summer Nights\u0026#34;, \u0026#34;title\u0026#34; : \u0026#34;Summer Nights\u0026#34; }, \u0026#34;streamer\u0026#34; : \u0026#34;\u0026#34; }, ... ], \u0026#34;station\u0026#34; : { \u0026#34;backend\u0026#34; : \u0026#34;liquidsoap\u0026#34;, \u0026#34;description\u0026#34; : \u0026#34;\u0026#34;, \u0026#34;frontend\u0026#34; : \u0026#34;icecast\u0026#34;, \u0026#34;id\u0026#34; : 2, \u0026#34;is_public\u0026#34; : true, \u0026#34;listen_url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/radio/8010/radio.mp3\u0026#34;, \u0026#34;mounts\u0026#34; : [ { \u0026#34;bitrate\u0026#34; : 128, \u0026#34;format\u0026#34; : \u0026#34;mp3\u0026#34;, \u0026#34;id\u0026#34; : 2, \u0026#34;is_default\u0026#34; : true, \u0026#34;listeners\u0026#34; : { \u0026#34;current\u0026#34; : 6, \u0026#34;total\u0026#34; : 6, \u0026#34;unique\u0026#34; : 6 }, \u0026#34;name\u0026#34; : \u0026#34;128kbps MP3\u0026#34;, \u0026#34;path\u0026#34; : \u0026#34;/radio.mp3\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/radio/8010/radio.mp3\u0026#34; }, { \u0026#34;bitrate\u0026#34; : 64, \u0026#34;format\u0026#34; : \u0026#34;mp3\u0026#34;, \u0026#34;id\u0026#34; : 3, \u0026#34;is_default\u0026#34; : false, \u0026#34;listeners\u0026#34; : { \u0026#34;current\u0026#34; : 3, \u0026#34;total\u0026#34; : 3, \u0026#34;unique\u0026#34; : 3 }, \u0026#34;name\u0026#34; : \u0026#34;64kbps MP3\u0026#34;, \u0026#34;path\u0026#34; : \u0026#34;/low.mp3\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/radio/8010/low.mp3\u0026#34; } ], \u0026#34;name\u0026#34; : \u0026#34;freeCodeCamp.org Code Radio\u0026#34;, \u0026#34;playlist_m3u_url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/public/coderadio/playlist.m3u\u0026#34;, \u0026#34;playlist_pls_url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/public/coderadio/playlist.pls\u0026#34;, \u0026#34;public_player_url\u0026#34; : \u0026#34;https://coderadio-admin.freecodecamp.org/public/coderadio\u0026#34;, \u0026#34;remotes\u0026#34; : [ { \u0026#34;bitrate\u0026#34; : 128, \u0026#34;format\u0026#34; : \u0026#34;mp3\u0026#34;, \u0026#34;id\u0026#34; : 38063, \u0026#34;listeners\u0026#34; : { \u0026#34;current\u0026#34; : 7, \u0026#34;total\u0026#34; : 7, \u0026#34;unique\u0026#34; : 7 }, \u0026#34;name\u0026#34; : \u0026#34;128kbps MP3 (New York)\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://coderadio-relay-nyc.freecodecamp.org/radio/8010/radio.mp3\u0026#34; }, { \u0026#34;bitrate\u0026#34; : 64, \u0026#34;format\u0026#34; : \u0026#34;mp3\u0026#34;, \u0026#34;id\u0026#34; : 38064, \u0026#34;listeners\u0026#34; : { \u0026#34;current\u0026#34; : 10, \u0026#34;total\u0026#34; : 10, \u0026#34;unique\u0026#34; : 10 }, \u0026#34;name\u0026#34; : \u0026#34;64kbps MP3 (New York)\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://coderadio-relay-nyc.freecodecamp.org/radio/8010/low.mp3\u0026#34; }, ... ], \u0026#34;shortcode\u0026#34; : \u0026#34;coderadio\u0026#34;, \u0026#34;url\u0026#34; : \u0026#34;https://coderadio.freecodecamp.org\u0026#34; } } Now in order to stream from the terminal all you have to do is\n1 mpv https://coderadio-admin.freecodecamp.org/radio/8010/radio.mp3 Conclusion Besides the main URL, the API also returns relay stream URLs, so you can use them in case you face high latency.\nIf it\u0026rsquo;s online, everything will once be available on the terminal.\nEnjoy streaming music from your Terminal!\n","permalink":"https://cd.is-a.dev/posts/streaming-freecodecamps-coderadio-using-mpv/","summary":"\u003ch1 id=\"motivation\"\u003eMotivation\u003c/h1\u003e\n\u003cp\u003eWho doesn\u0026rsquo;t like to be cool on the internet and amongst other developer friends? Anyone? Everyone like to flex their skills. Isn\u0026rsquo;t it? It\u0026rsquo;s much more cool to listen 24x7 to Lofi on the terminal, whereas your friends may be stuck on ads every now and then. Besides looking cool, having a browser open for streaming music isn\u0026rsquo;t a good deal. Browsers are way too bloates especially if you\u0026rsquo;re low on resources.\u003c/p\u003e","title":"Streaming FreeCodeCamp's Coderadio using mpv"},{"content":"In my Hello World post, I described how I set up my site, from a simple Next.js application to a blogging site. But then I realised that I spent more time in actually getting it work than on writing some real stuff, so I started feeling that I need to change this. The best way I could do this was to switch to an Open Source blogging solution. I found Hugo extremely good, and with the PaperMod theme, it did wonders.\nI\u0026rsquo;ve also opened up the source code for this site at https://github.com/thunder-coding/CodingThunder so that all the people who want to peek into the source code can do so.\nAlso, my exams are about to end, so I hope to get back to contribute to Open Source as soon as possible\n","permalink":"https://cd.is-a.dev/posts/announcing-open-sourcing-of-my-blog/","summary":"\u003cp\u003eIn my \u003ca href=\"/posts/hello-world\"\u003eHello World\u003c/a\u003e post, I described how I set up my site, from a simple Next.js application to a blogging site. But then I realised that I spent more time in actually getting it work than on writing some real stuff, so I started feeling that I need to change this. The best way I could do this was to switch to an Open Source blogging solution. I found Hugo extremely good, and with the \u003ca href=\"https://github.com/adityatelange/hugo-PaperMod/\"\u003ePaperMod theme\u003c/a\u003e, it did wonders.\u003c/p\u003e","title":"Announcing Open Sourcing of my blog site"},{"content":" See https://thunder-coding.github.io/sponsor for an updated link including other cryptocurrencies and up to date info\nHey there, this is to announce that now I do accept sponsorships for my open source contributions and work using Bitcoin. I mostly contribute to Termux\u0026rsquo;s packaging work, porting packages and updating them. I also hope to start my own open source project soon and do some cool research.\nI hope that I continue my open source work!\n","permalink":"https://cd.is-a.dev/posts/now-you-can-sponsor-me-for-my-open-source-work-using-bitcoin/","summary":"\u003cblockquote\u003e\n    \u003cp\u003eSee \u003ca href=\"https://thunder-coding.github.io/sponsor\"\u003ehttps://thunder-coding.github.io/sponsor\u003c/a\u003e for an updated link including other cryptocurrencies and up to date info\u003c/p\u003e\n  \u003c/blockquote\u003e\n\n\u003cp\u003eHey there, this is to announce that now I do accept sponsorships for my open source contributions and work using Bitcoin. I mostly contribute to Termux\u0026rsquo;s packaging work, porting packages and updating them. I also hope to start my own open source project soon and do some cool research.\u003c/p\u003e\n\u003cp\u003eI hope that I continue my open source work!\u003c/p\u003e","title":"Now you can sponsor me for my open source work using Bitcoin"},{"content":" Note: this site has now moved to Hugo + PaperMod. This article should be considered absolute\nJust like how programmers write a hello world program first to check the functioning of their tools. In this blog, I will be testing all the features of my blog.\nAbout Me I am a student currently learning software development as a hobby with an aim to become a full time OSS contributor in the future.\nMy Skills Git GitHub Problem Solving Open Source So, if you have known enough about me let\u0026rsquo;s do what this blog was written for. So let\u0026rsquo;s test all features of the site.\nBlog Tests Code block test 1 2 3 function BlogPage(props: Props) { return \u0026lt;\u0026gt;...\u0026lt;/\u0026gt;; } Inline code blocks are cool too, aren\u0026rsquo;t they?\nHow this site was created\u0026hellip; The techstack This site is a React application. Don\u0026rsquo;t believe me? Oh I admit it\u0026rsquo;s not plain React 😁\nSo, the secret ingrediants are\u0026hellip; Oh wait are they really so secret? No. Anyways, here\u0026rsquo;s the list of ingrediants\nNext.js MDX (Markdown + React) TypeScript For MDX, I am currently using next-mdx-remote. Earlier I had almost set this site up with next-mdx-enhanced, but its unmaintained now, and had some problems with latest Webpack, so I decided to just move away.\nSo that\u0026rsquo;s all, that might not be so cool as other blogs but I assure you that I will add new features here soon 😉\n","permalink":"https://cd.is-a.dev/posts/hello-world/","summary":"\u003cblockquote\u003e\n    \u003cp\u003eNote: this site has now moved to Hugo + PaperMod. This article should be considered absolute\u003c/p\u003e\n  \u003c/blockquote\u003e\n\n\u003cp\u003eJust like how programmers write a hello world program first to check the functioning of their tools. In this blog, I will be testing all the features of my blog.\u003c/p\u003e\n\u003ch1 id=\"about-me\"\u003eAbout Me\u003c/h1\u003e\n\u003cp\u003eI am a student currently learning software development as a hobby with an aim to become a full time OSS contributor in the future.\u003c/p\u003e","title":"Hello World: Welcome to my blog"},{"content":"Open Source work by me Mostly I contribute to the Termux project both as a contributor and a maintainer reviewing PRs. For Termux, I maintain Node.js and also help in updating critical libraries to which a lot of packages make use of. Although lately, I expect myself to work less here and more on personal projects which I\u0026rsquo;m planning to bring up.\nCryptocurrencies Note that these addresses aren\u0026rsquo;t generated server-side and. In case you want private addresses for payment mail me at yakshbari4@gmail.com\nBitcoin BTC Address: bc1p73m68nerdpzeefrx8xnnwkqspma9dy0f9a7ykqtf7488whd2mm6qhnk2dp\nEthereum ETH Address: 0x3e86CBC54b4f9daCE9f616e3766555DeB914B632\nDogecoin DOGE Address: DBRmxAGo8Q19kkAb3jZyPDDU8dYXohn5r6\nLitecoin LTC Address: ltc1q5zjmj860hr6m6jl4pw868thczzeyp0z8yqw4ar\n","permalink":"https://cd.is-a.dev/sponsor/","summary":"\u003ch1 id=\"open-source-work-by-me\"\u003eOpen Source work by me\u003c/h1\u003e\n\u003cp\u003eMostly I contribute to the \u003ca href=\"https://termux.org\"\u003eTermux project\u003c/a\u003e both as a contributor and a maintainer reviewing PRs. For Termux, I maintain \u003ca href=\"https://nodejs.org\"\u003eNode.js\u003c/a\u003e and also help in updating critical libraries to which a lot of packages make use of. Although lately, I expect myself to work less here and more on personal projects which I\u0026rsquo;m planning to bring up.\u003c/p\u003e\n\u003ch2 id=\"cryptocurrencies\"\u003eCryptocurrencies\u003c/h2\u003e\n\n\n\n  \u003cblockquote\u003e\n    \u003cp\u003eNote that these addresses aren\u0026rsquo;t generated server-side and. In case you want private addresses for payment mail me at \u003ca href=\"mailto:yakshbari4@gmail.com\"\u003eyakshbari4@gmail.com\u003c/a\u003e\u003c/p\u003e","title":"Sponsor Me"}]